import queue
import threading
import sounddevice as sd
import soundfile as sf
from faster_whisper import WhisperModel
from modules.emotion import detect_tone

class AudioInput:
    def __init__(self, model_name="tiny.en"):
        self.audio_queue = queue.Queue()
        self.transcribed_text = ""
        self.mood = "[emotion: unknown]"
        # use a small model for faster CPU inference
        self.model = WhisperModel(model_name, compute_type="int8")
        self.running = False

    def _audio_callback(self, indata, frames, time, status):
        # push raw audio into our queue
        self.audio_queue.put(indata.copy())

    def _listen_loop(self):
        while self.running:
            audio_chunk = self.audio_queue.get()
            try:
                print("[AudioInput] running transcription…")
                segments, _ = self.model.transcribe(audio_chunk[:, 0], beam_size=1)
                segments = list(segments)  # consume generator
                print(f"[AudioInput] segments: {segments}")
                full = " ".join(seg.text for seg in segments)
                print(f"[AudioInput] full: '{full}'")
                if full.strip():
                    print(f"[Audio Transcript] {full.strip()}")
                    self.transcribed_text = full.strip()
                    self.mood = detect_tone(full)
                else:
                    print("[AudioInput] silence or no transcribable audio.")
                    sf.write("last_chunk.wav", audio_chunk, 16000)
            except Exception as e:
                print(f"[AudioInput Error] {e}")

    def start_stream(self):
        """Begin capturing from microphone and start the background thread."""
        self.running = True
        print("\n\n=== AUDIO DEVICES ===")
        print(sd.query_devices())
        print("=== END ===\n\n")
        self.stream = sd.InputStream(
            samplerate=16000, channels=1, device=9,  # ← or whatever device index works
            callback=self._audio_callback
        )
        self.stream.start()
        threading.Thread(target=self._listen_loop, daemon=True).start()

    def stop_stream(self):
        """Stop the microphone stream and background thread."""
        self.running = False
        try:
            self.stream.stop()
        except Exception:
            pass

    def get_transcription(self):
        """Return the last non-empty transcription."""
        return self.transcribed_text

    def get_mood(self):
        """Return the detected mood from the last transcription."""
        return self.mood
